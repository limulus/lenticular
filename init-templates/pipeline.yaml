AWSTemplateFormatVersion: "2010-09-09"
Description: '${productName} Build Pipeline'


# -------------------------------------------------------------------
# Template Parameters
# -------------------------------------------------------------------

Parameters:
  GitHubOauthToken:
    Type: String
    NoEcho: true
  # GitHubWebhookSecretName:
  #   Type: String


Resources:

# -------------------------------------------------------------------
# Resources: CodePipeline for
# -------------------------------------------------------------------

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Lenticular::ProductName
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      Stages:

        - Name: FetchSourceCode
          Actions:
            - Name: FetchSourceCode
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Lenticular::ConfigValue githubRepoOwner
                Repo: !Lenticular::ConfigValue githubRepoName
                Branch: !Lenticular::ConfigValue githubRepoBranch
                OAuthToken: !Ref GitHubOauthToken
              InputArtifacts: []
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: BuildProductArtifacts
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: ProductArtifacts
              Configuration:
                ProjectName: !Ref ArtifactBuilder
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployInfrastructure
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - Name: ProductArtifacts
              Configuration:
                StackName: !Lenticular::ProductName
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                TemplatePath: ProductArtifacts::infrastructure.yaml
                RoleArn: CloudFormationRole
              RunOrder: 1

  ArtifactBuilder:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:6.3.1
        EnvironmentVariables:
          - Name: ARTIFACT_BUCKET
            Value: !Ref ArtifactBucket
      Name: !Lenticular::ResourceName ArtifactBuilder
      ServiceRole: !Ref ArtifactBuilderRole
      Source:
        Type: CODEPIPELINE


# -------------------------------------------------------------------
# Resources: S3 Bucket for Artifacts
# -------------------------------------------------------------------

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Lenticular::ResourceNameWithRegion artifacts
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl


# -------------------------------------------------------------------
# GitHub Webhook Endpoint
# -------------------------------------------------------------------

  GitHubWebhookHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Lenticular::ResourceName github-webhook-handler
      Description: Handles GitHub Webhook Requests
      Handler: index.handler
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 15
      Role: !GetAtt GitHubWebhookHandlerRole.Arn
      Environment:
        Variables:
          GITHUB_WEBHOOK_SECRET_NAME: vcr-cloud-github-webhook-secret  #!Ref GitHubWebhookSecretName
          GITHUB_REPO_BRANCH: master     # FIXME
          PIPELINE_NAME: !Ref Pipeline
      Code:
        ZipFile: |
          const AWS = require('aws-sdk')
          const createHmac = require('crypto').createHmac

          module.exports.handler = (event, context, cb) => {
            const githubWebhookSecretName = process.env.GITHUB_WEBHOOK_SECRET_NAME
            const branch = process.env.GITHUB_REPO_BRANCH

            const receivedSignature = event.headers['X-Hub-Signature']
            if (!receivedSignature) {
              const statusCode = 401, body = 'No X-Hub-Signature header on request'
              return cb(null, { statusCode, body })
            }

            const eventType = event.headers['X-GitHub-Event']
            if (!eventType) {
              const statusCode = 401, body = 'No X-GitHub-Event header on request'
            }

            const payload = JSON.parse(event.body)
            console.log(JSON.stringify(payload, undefined, 2))

            if (! eventType.match(/^(push)$/)) {
              const statusCode = 200, body = ''
              return cb(null, { statusCode, body })
            }

            const ssm = new AWS.SSM()
            const Names = [githubWebhookSecretName], WithDecryption = true
            ssm.getParameters({ Names, WithDecryption }).promise()
              .then(response => {
                const secret = response.Parameters[0].Value
                const expectedSignature = createHmac('sha1', secret)
                  .update(event.body, 'utf-8')
                  .digest('hex')

                if (receivedSignature !== `sha1=$${expectedSignature}`) {
                  console.log(`Expected signature '$${expectedSignature}'`)
                  const statusCode = 401, body = 'Failed signature validation'
                  return cb(null, { statusCode, body })
                }

                if (eventType === 'push' && payload.ref === `refs/heads/$${branch}`) {
                  const cp = new AWS.CodePipeline()
                  const name = process.env.PIPELINE_NAME
                  cp.startPipelineExecution({name}).promise()
                    .then(response => {
                      console.log(`Successfully started pipeline execution. $${response.pipelineExecutionId}`)
                      const statusCode = 200, body = JSON.stringify(response)
                      return cb(null, { statusCode, body })
                    })
                    .catch(err => {
                      console.log(`Failed to start pipeline execution. $${err.message}`)
                      const statusCode = 500, body = err.message
                      return cb(null, { statusCode, body })
                    })
                }
              })
              .catch(err => {
                console.log(`ssm.getParameters failed. $${err.message}`)
                const statusCode = 500, body = err.message
                return cb(null, { statusCode, body })
              })
          }

  GitHubWebhookApiHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:$${AWS::Region}:$${AWS::AccountId}:*'
      FunctionName: !GetAtt GitHubWebhookHandlerFunction.Arn

  GitHubWebhookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Lenticular::ResourceName 'github-webhook'

  GitHubWebhookApiEventResourcePost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GitHubWebhookApi
      ResourceId: !GetAtt GitHubWebhookApi.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        PassthroughBehavior: when_no_match
        Uri: !Sub 'arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/$${GitHubWebhookHandlerFunction.Arn}/invocations'
        IntegrationHttpMethod: POST

  GitHubWebhookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GitHubWebhookApi
      StageName: v1
    DependsOn:
      - GitHubWebhookApiEventResourcePost


# -------------------------------------------------------------------
# Resources: IAM Roles
# -------------------------------------------------------------------

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Lenticular::ResourceNameWithRegion pipleine
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ArtifactBuilderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Lenticular::ResourceNameWithRegion artifact-builder
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: artifact-builder
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: !Sub '$${ArtifactBucket.Arn}:*'
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
              - Effect: Allow
                Resource: '*'
                Action:
                  - codecommit:GitPull
              - Effect: Allow
                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:*'
                Action:
                  - 'logs:CreateLog*'
                  - 'logs:PutLog*'

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Lenticular::ResourceNameWithRegion cloudformation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  GitHubWebhookHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Lenticular::ResourceNameWithRegion github-webhook-handler
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      Policies:
        - PolicyName: github-webhook-handler
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource: !Sub 'arn:aws:codepipeline:$${AWS::Region}:$${AWS::AccountId}:$${Pipeline}'
                Action:
                  - 'codepipeline:StartPipelineExecution'
              - Effect: Allow
                Resource: !Sub 'arn:aws:ssm:$${AWS::Region}:$${AWS::AccountId}:parameter/vcr-cloud-github-webhook-secret' # FIXME !Ref GitHubWebhookSecretName
                Action:
                  - 'ssm:GetParameters'
              - Effect: Allow
                Resource: !ImportValue SecretsKeyArn
                Action:
                  - 'kms:Decrypt'
              - Effect: Allow
                Resource: !Sub 'arn:aws:logs:$${AWS::Region}:$${AWS::AccountId}:*'
                Action:
                  - 'logs:CreateLog*'
                  - 'logs:PutLog*'


# -------------------------------------------------------------------
# Outputs
# -------------------------------------------------------------------

Outputs:
  pipelineId:
    Value: !Ref 'Pipeline'
  GitHubWebhookUri:
    Value: !Sub "https://$${GitHubWebhookApi}.execute-api.$${AWS::Region}.amazonaws.com/v1/"
